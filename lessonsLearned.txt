1/23/2023 (Edgar):
Running shell commands/scripts in Linux:
	-When running a script through BldIt in a Linux environment, I was getting a permission denied error
	-I learned to allow the script to run by running "chmod +x {scriptPath}"
	-However, instead of running that for every script, I learned a better way:
	-The user should run the script using '/usr/bin/sh {scriptPath}"


Edgar:
12/20/2022:
Setting Up Azure Pipelines to deploy contracts nuget package:
	-Since GitHub Actions errored with "NuGet.targets(132,5): error : Object reference not set to an instance of an object,"
	 I decided to try adding the nuget feed credentials before restoring dependencies.
	 However, this did not seem to work still in GitHub actions.
	 I found this error thanks to having the exact same error in my docker container (since I was trying to run the build without nuget credentials).
	 Therefore, I found it had to do with credentials (which not Google nor ChatGPT could solve my issue).
	-So, I decided to try Azure pipelines.
	-I learned to setup a pipeline to deploy a nuget package to my custom JFrog Artifactory.
	-Leared to trigger pipeline only when contracts folder changes (with trigger paths)
	-Got the same error as with GitHub actions but thankfully re-adding the credentials task in both jobs (build and deploy), 
	 did work in Azure Pipelines which could not work in GitHub actions.
	-Maybe I was missing something in Actions, but at the end I learned something new! 
	 (And secretly got some ideas from Azure Pipelines for my own ci-cd system so called BldIt shhh...)



12/14/2022:
Setting up Docker container for projects microservice:
	-Learned how to create a Dockerfile to run the microservice
	-Learned about docker arguments (ARG keyword in Dockerfile and --build-arg parameter in docker-compose)
	-Learned to configure Nuget.Config to accept environment variables
	-Added custom nuget feed into Docker container which uses the Docker arguments for environment variables



11/20/2022:
Setting up GitHub Actions pipeline to pack and deploy contracts projects used by other microservices
	-Learned to write a python script that automatically detects which contracts project changed.
	 Based on this script, it sets the necessary env vars to build contract projects and deploy.
	 GitHub Actions pipeline uses the env vars set by the python script.


11/14/2022:
Setting up a basic microservice arch (so far):
I learned & achieved the following on different scenarios
-When setting up BldIt.Api.Shared:
	-I was able to determine shared components that are reusable through the entire system.
	-Thanks to the ci/cd github actions pipeline I created, I was able to continuously push changes and
	 I was able to write a script to automatically install the latest version from NuGet/JFrog (locally for any microservice).

-When setting up microservices:
	-Implemented clean arch for each micro.
	-Able to break down features into specific microservices (to the best of my knowledge at this point).
	-Created a script to automatically build any desired microservice project.
	-Able to implement my own extensions & helper classes to support configuration of different services (such as BldIt paths)
	-I was able to use identity microservice and projects microservice together for authentication (both independent from each other!)
	

Overall Archievements:
-Better understanding of microservice arch
-Ability to decouple microservices so they don't depend on each other
 (So far I have achieved this with projects micro and identity micro)
-Had fun!


Future Goals:
-Run micros in docker. Database, rabbitMQ, paths, etc in docker containers.
-Make ci-cd pipeline for each micro using Azure Pipelines 
 (And in the long-term ||Maybe short term ;)|| setup ci-cd pipeline using THIS system :p).
-Learn more about communication between micros.


11/11/2022:

Setting up CI-CD for BldIt.Common:
-When working with yml file lessons learned:
	-Cannot use both "uses" and "run" in the same step, 
	 must have "run" followed with a hyphen "-  run: code" (If we decide to include "uses").
	-How to add env variables to reduce duplication.
	-Remembered how to run build only when a path changes (with "paths").
	-How to use ${{}} for github secrets and variables.
	-Yml must use actions/checkout@v3 if paths from repo are referenced
	 (This action checks out the code so we can use paths inside workflow steps).

-When working with "dotnet nuget" & "nuget" commands:
	-Each one seems to refer to a different nuget config file.
	-Use only 1 version of the command (either "nuget" or "dotnet nuget")
	 OR specify nuget config file in the command.
	-Overall understanding of how to package and publish into custom nuget packages.

-When working with jfrog:
	-MUST use a local repo type in order to upload packages and prevent 400 request.
	-Possible to use curl when uploading to get more information about the http request.
	-Overall understanding of how to use a custom/private nuget artifactory.


Overall Archievements:
-Better understanding of GitHub Actions.
-Good understanding of packaging with nuget & publishing to private nuget server.
-Learned about JFrog!

Future Goals:
-Familiarize more with shell scripting for advanced tasks.





